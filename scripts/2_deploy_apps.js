// scripts/2_deploy_apps.js

const { ethers, upgrades } = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("--- Starting Application Layer Deployment ---");
  const [deployer] = await ethers.getSigners();
  console.log("Deploying with account:", deployer.address);

  const initialOwnerAddress = deployer.address;

  // Read addresses from the file generated by 1_deploy_core.js
  const deployedAddressesPath = path.join(__dirname, '../deployed_addresses.json');
  let deployedAddresses = {};
  if (fs.existsSync(deployedAddressesPath)) {
    deployedAddresses = JSON.parse(fs.readFileSync(deployedAddressesPath, "utf8"));
  } else {
    throw new Error("deployed_addresses.json not found. Please run 1_deploy_core.js first.");
  }

  // Retrieve core contract addresses (ensure they were deployed and saved by 1_deploy_core.js)
  const novaRegistryAddress = deployedAddresses.NovaRegistry;
  const novaCoinAddress = deployedAddresses.NovaCoin_ProgrammableSupply;
  const novaProfilesAddress = deployedAddresses.NovaProfiles;
  const nftAuctionHouseAddress = deployedAddresses.NFTAuctionHouse;
  const nftOfferBookAddress = deployedAddresses.NFTOfferBook;
  const novaTreasuryAddress = deployedAddresses.NovaTreasury;

  if (!novaRegistryAddress || !novaCoinAddress || !novaProfilesAddress || !nftAuctionHouseAddress || !nftOfferBookAddress || !novaTreasuryAddress) {
      throw new Error("One or more core contract addresses not found. Ensure 1_deploy_core.js ran successfully.");
  }
  console.log("Using NovaRegistry at:", novaRegistryAddress);
  console.log("Using NovaCoin at:", novaCoinAddress);
  console.log("Using NovaProfiles at:", novaProfilesAddress);
  console.log("Using NFTAuctionHouse at:", nftAuctionHouseAddress);
  console.log("Using NFTOfferBook at:", nftOfferBookAddress);
  console.log("Using NovaTreasury at:", novaTreasuryAddress);


  // Contracts to deploy in the application layer
  const contractNames = [
    "NovaPolicyRules",
    "CollectorSetManager",
    "NovaNameService",
    "NovaKYCVerifier",
    "NovaMarketplace",
    "NovaPoints",
    "NovaReputation",
    "NovaReferral",
    "NovaChat",
    "NovaFeed",
    "NovaStreamerPayout",
    "NovaGameBridge",
    "TokenVesting"
  ];

  for (const name of contractNames) {
    console.log(`Deploying ${name}...`);
    const ContractFactory = await ethers.getContractFactory(name);
    let args = []; // Initialize arguments array for each contract

    // --- CRITICAL SECTION: DEFINE INITIALIZER ARGUMENTS FOR EACH CONTRACT ---
    // These arguments are NOW precisely matched to the initialize() functions you provided.
    switch (name) {
      case "NovaPolicyRules":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "CollectorSetManager":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaNameService":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaKYCVerifier":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaMarketplace":
        // initialize(address initialOwner, address registryAddress)
        args = [initialOwnerAddress, novaRegistryAddress]; // Only registryAddress, not all the others!
        break;
      case "NovaPoints":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaReputation":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaReferral":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaChat":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaFeed":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaStreamerPayout":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "NovaGameBridge":
        // initialize(address initialOwner)
        args = [initialOwnerAddress];
        break;
      case "TokenVesting":
        // initialize(address initialOwner, address _beneficiary, uint256 _vestingDuration, address _tokenAddress)
        const testVestedRecipient = "0x7c00e73d0c8cD8e036BE4b128d9a2454f3aaeD50"; // Your D50 address
        const testVestingDuration = 30 * 24 * 60 * 60; // Example: 30 days in seconds
        // Note: TokenVesting.sol's initialize does NOT take totalAmount or startTime/endTime.
        // It takes _vestingDuration (which is seconds) and _tokenAddress.
        args = [initialOwnerAddress, testVestedRecipient, testVestingDuration, novaCoinAddress];
        break;
      default:
        throw new Error(`Initializer arguments not defined for ${name}. Please define them in 2_deploy_apps.js`);
    }
    // --- END CRITICAL SECTION ---

    const deployedContract = await upgrades.deployProxy(ContractFactory, args, { initializer: 'initialize', kind: 'uups' });
    await deployedContract.waitForDeployment();
    const contractAddress = await deployedContract.getAddress();
    const implementationAddress = await upgrades.erc1967.getImplementationAddress(contractAddress);
    
    deployedAddresses[name] = contractAddress;
    deployedAddresses[`${name}_Implementation`] = implementationAddress;

    console.log(`-> ${name} deployed to: ${contractAddress}`);
    console.log(`-> ${name} implementation deployed to: ${implementationAddress}`);
  }

  // Write updated addresses back to the file
  fs.writeFileSync(deployedAddressesPath, JSON.stringify(deployedAddresses, null, 2));
  console.log(`\nAll application contract addresses saved to ${deployedAddressesPath}`);
  console.log("\n--- Application Layer Deployment Complete ---");

  // --- IMPORTANT: Output ALL new addresses for easy copy-pasting to CamAppServer/config/contractAddresses.json ---
  // This will now include both core and app contracts.
  console.log("\n--- NEWLY DEPLOYED AMOY CONTRACT ADDRESSES FOR CAMAPPSERVER ---");
  // Filter for only proxy addresses (not implementation) for the output to config file
  const proxyAddressesForConfig = Object.keys(deployedAddresses)
    .filter(key => !key.endsWith("_Implementation"))
    .reduce((obj, key) => {
      obj[key] = deployedAddresses[key];
      return obj;
    }, {});
  console.log(JSON.stringify(proxyAddressesForConfig, null, 2));
  console.log("---------------------------------------------------------------");

}

main().catch((error) => { console.error(error); process.exit(1); });